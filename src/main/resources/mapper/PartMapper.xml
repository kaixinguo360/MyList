<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.list.domain.PartMapper">

  <resultMap id="Node" type="com.my.list.domain.Node">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="node_user" jdbcType="BIGINT" property="user"/>
    <result column="node_type" jdbcType="VARCHAR" property="type"/>
    <result column="node_ctime" jdbcType="TIMESTAMP" property="ctime"/>
    <result column="node_mtime" jdbcType="TIMESTAMP" property="mtime"/>
    <result column="node_title" jdbcType="VARCHAR" property="title"/>
    <result column="node_excerpt" jdbcType="VARCHAR" property="excerpt"/>
    <result column="node_part" jdbcType="BIT" property="part"/>
    <result column="node_collection" jdbcType="BIT" property="collection"/>
    <result column="node_permission" jdbcType="VARCHAR" property="permission"/>
    <result column="node_nsfw" jdbcType="BIT" property="nsfw"/>
    <result column="node_like" jdbcType="BIT" property="like"/>
    <result column="node_hide" jdbcType="BIT" property="hide"/>
    <result column="node_source" jdbcType="VARCHAR" property="source"/>
    <result column="node_description" jdbcType="VARCHAR" property="description"/>
    <result column="node_comment" jdbcType="VARCHAR" property="comment"/>
  </resultMap>

  <!-- * * * * * * * * * * -->

  <insert id="insertChildren">
    insert into parts
    (part_parent_id, part_content_id, part_content_order)
    values
    <foreach collection ="childIds" item="childId" index= "index" separator =",">
      (#{parentId,jdbcType=BIGINT}, #{childId,jdbcType=LONGVARCHAR}, #{index,jdbcType=INTEGER})
    </foreach>
  </insert>
  <delete id="deleteChildren">
    delete from parts
    where part_parent_id = #{parentId,jdbcType=BIGINT}
      and part_content_id in
      (<foreach collection="childIds" item="childId" separator=",">#{childId,jdbcType=BIGINT}</foreach>)
  </delete>
  <delete id="deleteAllChildren">
    delete from parts
    where part_parent_id = #{parentId,jdbcType=BIGINT}
  </delete>
  <select id="selectAllChildren" resultMap="Node">
    SELECT content.*
    FROM nodes content, parts
    WHERE part_content_id = content.id
      AND part_parent_id = #{parentId}
    ORDER BY part_content_order
  </select>
  <select id="countChildren" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(part_id) from parts
    where part_parent_id = #{parentId,jdbcType=BIGINT}
    group by part_parent_id
  </select>

  <insert id="insertParents">
    insert into parts
    (part_parent_id, part_content_id, part_content_order)
    values
    <foreach collection ="parentIds" item="parentId" separator =",">
      (#{parentId,jdbcType=BIGINT}, #{childId,jdbcType=LONGVARCHAR}, 0)
    </foreach>
  </insert>
  <delete id="deleteParents">
    delete parts
    from parts, nodes parent
    where part_parent_id = parent.id
      and part_content_id = #{childId,jdbcType=BIGINT}
      and part_parent_id in (<foreach collection="parentIds" item="parentId" separator=",">#{parentId,jdbcType=BIGINT}</foreach>)
    <!-- EDITABLE -->
      and (
        parent.node_user = ${userId}
      or
        (parent.node_user != ${userId} and parent.node_permission = 'public')
      )
  </delete>
  <delete id="deleteAllParent">
    delete parts
    from parts, nodes parent
    where part_parent_id = parent.id
      and part_content_id = #{childId,jdbcType=BIGINT}
    <!-- EDITABLE -->
      and (
        parent.node_user = ${userId}
        or
        (parent.node_user != ${userId} and parent.node_permission = 'public')
      )
  </delete>
  <select id="selectAllParent" resultMap="Node">
    select parent.*
    from parts, nodes parent
    where part_parent_id = parent.id
      and part_content_id = #{childId}
    <!-- AVAILABLE -->
      and (
        parent.node_user = ${userId}
        or
        (parent.node_user != ${userId} and parent.node_permission in ('public', 'protect'))
      )
  </select>
  <select id="countParent" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(part_id)
    from parts, nodes parent
    where part_parent_id = parent.id
      and part_content_id = #{childId,jdbcType=BIGINT}
    <!-- AVAILABLE -->
      and (
        parent.node_user = ${userId}
        or
        (parent.node_user != ${userId} and parent.node_permission in ('public', 'protect'))
      )
    group by part_content_id
  </select>
  
  <delete id="clean">
    delete from nodes
    where id in
          (
            select content.id from (select * from nodes) content
                                     left join parts p on content.id = p.part_content_id
                                     left join (select * from nodes) parent on parent.id = p.part_parent_id
            where
              content.node_part = true
              and
              (parent.node_collection = true or parent.node_collection is null)
            group by content.id
            having count(parent.id) = 0
          )
  </delete>

</mapper>
