<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.list.mapper.SearchMapper">
  <resultMap id="BaseResultMap" type="com.my.list.entity.MainData">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="node_user" jdbcType="BIGINT" property="user"/>
    <result column="node_type" jdbcType="VARCHAR" property="type"/>
    <result column="node_ctime" jdbcType="TIMESTAMP" property="ctime"/>
    <result column="node_mtime" jdbcType="TIMESTAMP" property="mtime"/>
    <result column="node_title" jdbcType="VARCHAR" property="title"/>
    <result column="node_excerpt" jdbcType="VARCHAR" property="excerpt"/>
    <result column="node_part" jdbcType="BIT" property="part"/>
    <result column="node_collection" jdbcType="BIT" property="collection"/>
    <result column="node_permission" jdbcType="VARCHAR" property="permission"/>
    <result column="node_nsfw" jdbcType="BIT" property="nsfw"/>
    <result column="node_like" jdbcType="BIT" property="like"/>
    <result column="node_hide" jdbcType="BIT" property="hide"/>
    <result column="node_source" jdbcType="VARCHAR" property="source"/>
    <result column="node_description" jdbcType="VARCHAR" property="description"/>
    <result column="node_comment" jdbcType="VARCHAR" property="comment"/>
  </resultMap>
  <sql id="selectMap">
    select distinct content.id from nodes content
    left join links p on content.id = p.content_id
    left join nodes parent on parent.id = p.parent_id
  </sql>
  <sql id="tagCheck">
    <if test="userId!=null">
      (
      content.node_user = ${userId}
      or
      (content.node_user != ${userId} and content.node_permission in ('public', 'protect'))
      )
    </if>
  </sql>
  <sql id="tagChoose">
    (
    <if test="tag.type!=null">
      parent.node_type = '${tag.type}' and
    </if>
    <choose>
      <when test="tag.id!=null">
        parent.id = '${tag.id}'
      </when>
      <when test="tag.strict">
        parent.node_title = '${tag.value}'
      </when>
      <when test="!tag.strict">
        parent.node_title like '%${tag.value}%'
      </when>
    </choose>
    )
  </sql>
  <sql id="allString">
    CONCAT(COALESCE(content.node_title, ''), COALESCE(content.node_description, ''), COALESCE(content.node_comment, ''), COALESCE(content.node_source, ''))
  </sql>
  
  <select id="getAll" resultMap="BaseResultMap">
    select distinct content.*
    from nodes content
    <!-- tags or -->
    <if test="filter.orTags!=null and filter.orTags.size()!=0">
      left join links p on content.id = p.content_id
      left join nodes parent on parent.id = p.parent_id
    </if>
    <where>
      
      <!-- dynamic conditions -->
      <if test="filter.conditions!=null and filter.conditions.size()!=0">
        and
        <foreach collection="filter.conditions" item="cond" separator="and">
          ${cond.column} ${cond.oper} ${cond.value}
        </foreach>
      </if>

      <!-- types -->
      <if test="filter.types!=null">
        and
        <if test="filter.types.size()==0">false</if>
        <if test="filter.types.size()!=0">
          content.node_type in
          <foreach collection="filter.types" item="type" open="(" close=")" separator=",">#{type}</foreach>
        </if>
      </if>

      <!-- part & collection -->
      <if test="filter.part!=null">
        and content.node_part = ${filter.part}
      </if>
      <if test="filter.collection!=null">
        and content.node_collection = ${filter.collection}
      </if>

      <!-- words and -->
      <if test="filter.andKeywords!=null and filter.andKeywords.size()!=0">
        and
        <foreach collection="filter.andKeywords" item="word" separator="and">
          <include refid="allString"/> ~* '${word}'
        </foreach>
      </if>
      <!-- words or -->
      <if test="filter.orKeywords!=null and filter.orKeywords.size()!=0">
        and
        <include refid="allString"/> ~*
        <foreach collection="filter.orKeywords" item="word" separator="|" open="'" close="'">${word}</foreach>
      </if>
      <!-- words not -->
      <if test="filter.notKeywords!=null and filter.notKeywords.size()!=0">
        and
        <include refid="allString"/> !~*
        <foreach collection="filter.notKeywords" item="word" separator="|" open="'" close="'">${word}</foreach>
      </if>
      
      <!-- tags and -->
      <if test="filter.andTags!=null and filter.andTags.size()!=0">
        and content.id in (
        <include refid="selectMap"/>
        where
        <foreach collection="filter.andTags" item="tag" open="(" separator="or" close=")">
          <include refid="tagChoose"/>
        </foreach>
        group by content.id
        having count(distinct parent.id) = ${filter.andTags.size()}
        )
      </if>
      <!-- tags or -->
      <if test="filter.orTags!=null and filter.orTags.size()!=0">
        and content.id in (
        <include refid="selectMap"/>
      where
        <foreach collection="filter.orTags" item="tag" open="(" separator="or" close=")">
          <include refid="tagChoose"/>
        </foreach>
        )
      </if>
      <!-- tags not -->
      <if test="filter.notTags!=null and filter.notTags.size()!=0">
        and content.id not in (
        <include refid="selectMap"/>
        where
        <foreach collection="filter.notTags" item="tag" open="(" separator="or" close=")">
          <include refid="tagChoose"/>
        </foreach>
        )
      </if>
      
      <!-- permission -->
      <if test="userId!=null">
        <if test="filter.permission!=null">
          <choose>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@PRIVATE">
              and content.node_user = ${userId}
              and content.node_permission = 'private'
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@PROTECT">
              and content.node_user = ${userId}
              and content.node_permission = 'protect'
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@PUBLIC">
              and content.node_user = ${userId}
              and content.node_permission = 'public'
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@SHARED">
              and content.node_user = ${userId}
              and content.node_permission in ('public', 'protect')
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@SELF">
              and content.node_user = ${userId}
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@OTHERS_PROTECT">
              and content.node_user != ${userId}
              and content.node_permission = 'protect'
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@OTHERS_PUBLIC">
              and content.node_user != ${userId}
              and content.node_permission = 'public'
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@OTHERS_SHARED">
              and content.node_user != ${userId}
              and content.node_permission in ('public', 'protect')
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@EDITABLE">
              and (
              content.node_user = ${userId}
              or
              (content.node_user != ${userId} and content.node_permission = 'public')
              )
            </when>
            <when test="filter.permission == @com.my.list.entity.filter.Permission@AVAILABLE">
              and (
              content.node_user = ${userId}
              or
              (content.node_user != ${userId} and content.node_permission in ('public', 'protect'))
              )
            </when>
          </choose>
        </if>
        <if test="filter.permission==null">
          <!-- default permission = SELF -->
          and content.node_user = ${userId}
        </if>
      </if>
      
      <!-- nsfw & like & hide -->
      <if test="filter.nsfw!=null">
        and content.node_nsfw = ${filter.nsfw}
      </if>
      <if test="filter.like!=null">
        and content.node_like = ${filter.like}
      </if>
      <if test="filter.hide!=null">
        and content.node_hide = ${filter.hide}
      </if>
    </where>
    <if test="filter.sorts!=null and filter.sorts.size()!=0">
      order by
      <foreach collection="filter.sorts" item="sort" separator=",">
        content.${sort.property} ${sort.direction}
      </foreach>
    </if>
  </select>
</mapper>
