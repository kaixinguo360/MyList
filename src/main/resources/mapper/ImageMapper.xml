<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.list.module.image.ImageMapper">
  <resultMap id="BaseResultMap" type="com.my.list.module.image.Image">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="user" jdbcType="BIGINT" property="user"/>
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime"/>
    <result column="mtime" jdbcType="TIMESTAMP" property="mtime"/>
    <result column="page_title" jdbcType="VARCHAR" property="pageTitle"/>
    <result column="page_url" jdbcType="VARCHAR" property="pageUrl"/>
    <result column="image_title" jdbcType="VARCHAR" property="imageTitle"/>
    <result column="image_url" jdbcType="VARCHAR" property="imageUrl"/>
    <collection property="tags" ofType="java.lang.String">
      <result column="tags.name"/>
    </collection>
  </resultMap>

  <!-- Single Crud -->
  <insert id="insert" keyColumn="id" keyProperty="resource.id" useGeneratedKeys="true">
    insert into images (
      id,
      user,
      ctime,
      mtime,
      page_title,
      page_url,
      image_title,
      image_url
    )
    values (
             #{resource.id,jdbcType=BIGINT},
             #{user.id,jdbcType=BIGINT},
             #{resource.ctime,jdbcType=TIMESTAMP},
             #{resource.mtime,jdbcType=TIMESTAMP},
             #{resource.pageTitle,jdbcType=VARCHAR},
             #{resource.pageUrl,jdbcType=VARCHAR},
             #{resource.imageTitle,jdbcType=VARCHAR},
             #{resource.imageUrl,jdbcType=VARCHAR}
           )
  </insert>
  <select id="select" resultMap="BaseResultMap">
    select images.*, tags.name
    from images
           left join image_tags on images.id = image_tags.image_id
           left join tags on tags.id = image_tags.tag_id
    where images.id = #{id,jdbcType=BIGINT} and images.user = #{user.id,jdbcType=BIGINT}
  </select>
  <update id="update">
    update images
    set id              = #{resource.id,jdbcType=BIGINT},
        user            = #{resource.user,jdbcType=BIGINT},
        mtime           = #{resource.mtime,jdbcType=TIMESTAMP},
        page_title      = #{resource.pageTitle,jdbcType=VARCHAR},
        page_url        = #{resource.pageUrl,jdbcType=VARCHAR},
        image_title     = #{resource.imageTitle,jdbcType=VARCHAR},
        image_url       = #{resource.imageUrl,jdbcType=VARCHAR}
    where id = #{resource.id,jdbcType=BIGINT} and user = #{user.id,jdbcType=BIGINT}
  </update>
  <delete id="delete">
    delete
    from images
    where id = #{id,jdbcType=BIGINT} and user = #{user.id,jdbcType=BIGINT}
  </delete>

  <!-- Search -->
  <select id="search" resultMap="BaseResultMap">
    select distinct images.*, tags.name
    from images
    left join image_tags on images.id = image_tags.image_id
    left join tags on tags.id = image_tags.tag_id
    where images.id in
    (
      select fuck_mysql.id from
      (
        select images.id
        from images
        <where>
          <if test="includeText!=null and includeText.size()!=0">
            and
            <foreach collection="includeText" item="text" separator="and">
            (
              images.page_title like concat('%', #{text}, '%')
              or
              images.image_title like concat('%', #{text}, '%')
            )
            </foreach>
          </if>
          <if test="excludeText!=null and excludeText.size()!=0">
            and
            <foreach collection="excludeText" item="text" separator="and">
            (
              images.page_title not like concat('%', #{text}, '%')
              and
              images.image_title not like concat('%', #{text}, '%')
            )
            </foreach>
          </if>
          <if test="andTags!=null and andTags.size()!=0">
            and images.id in
            (
              select distinct images.id
              from images
              left join image_tags on images.id = image_tags.image_id
              left join tags on tags.id = image_tags.tag_id
              where
              <foreach collection="andTags" item="tagName" open="(" separator="or" close=")">
                tags.name = #{tagName,jdbcType=VARCHAR}
              </foreach>
              and tags.user = #{user.id,jdbcType=BIGINT}
              group by images.id
              having count(distinct tags.id) = ${andTags.size()}
            )
          </if>
          <if test="orTags!=null and orTags.size()!=0">
            and images.id in
            (
              select distinct images.id
              from images
              left join image_tags on images.id = image_tags.image_id
              left join tags on tags.id = image_tags.tag_id
              where
              <foreach collection="orTags" item="tagName" open="(" separator="or" close=")">
                tags.name = #{tagName,jdbcType=VARCHAR}
              </foreach>
              and tags.user = #{user.id,jdbcType=BIGINT}
            )
          </if>
          <if test="notTags!=null and notTags.size()!=0">
            and images.id not in
            (
              select distinct images.id
              from images
              left join image_tags on images.id = image_tags.image_id
              left join tags on tags.id = image_tags.tag_id
              where
              <foreach collection="notTags" item="tagName" open="(" separator="or" close=")">
                tags.name = #{tagName,jdbcType=VARCHAR}
              </foreach>
              and tags.user = #{user.id,jdbcType=BIGINT}
            )
          </if>
          and images.user = #{user.id,jdbcType=BIGINT}
        </where>
        order by ${orderBy} ${orderDirection}
        limit #{limit,jdbcType=INTEGER} offset #{offset,jdbcType=INTEGER}
      ) as fuck_mysql
    )
  </select>

  <!-- Tag -->
  <insert id="addTags">
    insert ignore into image_tags(image_id, tag_id)
    values
    <foreach collection="tagIds" item="tagId" separator=",">
      (#{id,jdbcType=BIGINT}, #{tagId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <delete id="removeTags">
    delete
    from image_tags
    where image_id = #{id,jdbcType=BIGINT}
      and tag_id in 
          <foreach collection="tagIds" item="tagId" open="(" separator="," close=")">
            #{tagId,jdbcType=BIGINT}
          </foreach>
  </delete>
  <select id="getTags" resultType="java.lang.String">
    select tags.name
    from images
           inner join image_tags on images.id = image_tags.image_id
           inner join tags on tags.id = image_tags.tag_id
    where images.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="clearTags">
    delete
    from image_tags
    where image_id = #{id,jdbcType=BIGINT}
  </delete>

</mapper>
