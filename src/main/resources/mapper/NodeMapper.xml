<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.list.domain.NodeMapper">
  <resultMap id="BaseResultMap" type="com.my.list.domain.Node">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="node_user" jdbcType="BIGINT" property="user"/>
    <result column="node_type" jdbcType="VARCHAR" property="type"/>
    <result column="node_ctime" jdbcType="TIMESTAMP" property="ctime"/>
    <result column="node_mtime" jdbcType="TIMESTAMP" property="mtime"/>
    <result column="node_title" jdbcType="VARCHAR" property="title"/>
    <result column="node_excerpt" jdbcType="VARCHAR" property="excerpt"/>
    <result column="node_link_delete" jdbcType="BIT" property="linkDelete"/>
    <result column="node_link_virtual" jdbcType="BIT" property="linkVirtual"/>
    <result column="node_permission" jdbcType="VARCHAR" property="permission"/>
    <result column="node_nsfw" jdbcType="BIT" property="nsfw"/>
    <result column="node_like" jdbcType="BIT" property="like"/>
    <result column="node_hide" jdbcType="BIT" property="hide"/>
    <result column="node_source_url" jdbcType="VARCHAR" property="sourceUrl"/>
    <result column="node_comment" jdbcType="VARCHAR" property="comment"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete
    from nodes
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.my.list.domain.Node" useGeneratedKeys="true">
    insert into nodes (node_user, node_type, node_ctime,
                       node_mtime, node_title, node_excerpt, node_link_delete, node_link_virtual,
                       node_permission, node_nsfw, node_like, node_hide, node_source_url, node_comment)
    values (#{user,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{ctime,jdbcType=TIMESTAMP},
            #{mtime,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}, #{excerpt,jdbcType=VARCHAR}, #{linkDelete,jdbcType=BIT}, #{linkVirtual,jdbcType=BIT},
            #{permission,jdbcType=VARCHAR}, #{nsfw,jdbcType=BIT}, #{like,jdbcType=BIT}, #{hide,jdbcType=BIT}, #{sourceUrl,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.my.list.domain.Node">
    update nodes
    set node_user         = #{user,jdbcType=BIGINT},
        node_type         = #{type,jdbcType=VARCHAR},
        node_ctime        = #{ctime,jdbcType=TIMESTAMP},
        node_mtime        = #{mtime,jdbcType=TIMESTAMP},
        node_title        = #{title,jdbcType=VARCHAR},
        node_excerpt      = #{excerpt,jdbcType=VARCHAR},
        node_link_delete  = #{linkDelete,jdbcType=BIT},
        node_link_virtual = #{linkVirtual,jdbcType=BIT},
        node_permission   = #{permission,jdbcType=VARCHAR},
        node_nsfw         = #{nsfw,jdbcType=BIT},
        node_like         = #{like,jdbcType=BIT},
        node_hide         = #{hide,jdbcType=BIT},
        node_source_url   = #{sourceUrl,jdbcType=VARCHAR},
        node_comment      = #{comment,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select *
    from nodes
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAllByListId" resultMap="BaseResultMap">
    SELECT n.*
    FROM nodes n, parts
    WHERE part_content_id = n.id
      AND part_parent_id = #{listId}
    ORDER BY part_content_order
  </select>
  
  <delete id="deleteByPrimaryKeyWithUserId">
    delete
    from nodes
    where id = #{id,jdbcType=BIGINT}
      and node_user = #{userId,jdbcType=BIGINT}
  </delete>
  <insert id="insertWithUserId" keyColumn="id" keyProperty="node.id" useGeneratedKeys="true">
    insert into nodes (node_user, node_type, node_ctime,
                       node_mtime, node_title, node_excerpt, node_link_delete, node_link_virtual,
                       node_permission, node_nsfw, node_like, node_hide, node_source_url, node_comment)
    values (#{userId,jdbcType=BIGINT}, #{node.type,jdbcType=VARCHAR}, #{node.ctime,jdbcType=TIMESTAMP},
            #{node.mtime,jdbcType=TIMESTAMP}, #{node.title,jdbcType=VARCHAR}, #{node.excerpt,jdbcType=VARCHAR}, #{linkDelete,jdbcType=BIT},
            #{linkVirtual,jdbcType=BIT}, #{node.permission,jdbcType=VARCHAR}, #{node.nsfw,jdbcType=BIT}, #{node.like,jdbcType=BIT}, #{node.hide,jdbcType=BIT}, #{node.sourceUrl,jdbcType=VARCHAR}, #{node.comment,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKeyWithUserId">
    update nodes
    set node_user         = #{userId,jdbcType=BIGINT},
        node_type         = #{node.type,jdbcType=VARCHAR},
        node_ctime        = #{node.ctime,jdbcType=TIMESTAMP},
        node_mtime        = #{node.mtime,jdbcType=TIMESTAMP},
        node_title        = #{node.title,jdbcType=VARCHAR},
        node_excerpt      = #{node.excerpt,jdbcType=VARCHAR},
        node_link_delete  = #{linkDelete,jdbcType=BIT},
        node_link_virtual = #{linkVirtual,jdbcType=BIT},
        node_permission   = #{node.permission,jdbcType=VARCHAR},
        node_nsfw         = #{node.nsfw,jdbcType=BIT},
        node_like         = #{node.like,jdbcType=BIT},
        node_hide         = #{hide,jdbcType=BIT},
        node_source_url   = #{node.sourceUrl,jdbcType=VARCHAR},
        node_comment      = #{node.comment,jdbcType=VARCHAR}
    where id = #{node.id,jdbcType=BIGINT}
      and node_user = #{userId,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKeyWithUserId" resultMap="BaseResultMap">
    select *
    from nodes
    where id = #{id,jdbcType=BIGINT}
      and node_user = #{userId,jdbcType=BIGINT}
  </select>
  <select id="selectAllByListIdWithUserId" resultMap="BaseResultMap">
    SELECT n.*
    FROM nodes n, parts, nodes parent
    WHERE part_content_id = n.id
      AND part_parent_id = parent.id
      AND parent.id = #{listId,jdbcType=BIGINT}
      AND parent.node_user = #{userId,jdbcType=BIGINT}
    ORDER BY part_content_order
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
    select *
    from nodes
  </select>
  <delete id="clean">
    delete from nodes
    where id in
    (
      select content.id from (select * from nodes) content
                               left join parts p on content.id = p.part_content_id
                               left join (select * from nodes) parent on parent.id = p.part_parent_id
      where
        content.node_link_delete = true
        and
        (parent.node_link_virtual = false or parent.node_link_virtual is null)
      group by content.id
      having count(parent.id) = 0
    )
  </delete>
</mapper>
