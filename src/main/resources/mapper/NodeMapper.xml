<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.list.domain.NodeMapper">
  <resultMap id="BaseResultMap" type="com.my.list.domain.Node">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="node_user" jdbcType="BIGINT" property="user"/>
    <result column="node_type" jdbcType="VARCHAR" property="type"/>
    <result column="node_ctime" jdbcType="TIMESTAMP" property="ctime"/>
    <result column="node_mtime" jdbcType="TIMESTAMP" property="mtime"/>
    <result column="node_title" jdbcType="VARCHAR" property="title"/>
    <result column="node_excerpt" jdbcType="VARCHAR" property="excerpt"/>
    <result column="node_part" jdbcType="BIT" property="part"/>
    <result column="node_collection" jdbcType="BIT" property="collection"/>
    <result column="node_permission" jdbcType="VARCHAR" property="permission"/>
    <result column="node_nsfw" jdbcType="BIT" property="nsfw"/>
    <result column="node_like" jdbcType="BIT" property="like"/>
    <result column="node_hide" jdbcType="BIT" property="hide"/>
    <result column="node_source" jdbcType="VARCHAR" property="source"/>
    <result column="node_description" jdbcType="VARCHAR" property="description"/>
    <result column="node_comment" jdbcType="VARCHAR" property="comment"/>
  </resultMap>
  <delete id="delete" parameterType="java.lang.Long">
    delete
    from nodes
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.my.list.domain.Node" useGeneratedKeys="true">
    insert into nodes (node_user, node_type, node_ctime, node_mtime, node_title,
                       node_excerpt, node_part, node_collection, node_permission,
                       node_nsfw, node_like, node_hide, node_source, node_description, node_comment)
    values (#{user,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{ctime,jdbcType=TIMESTAMP}, #{mtime,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR},
            #{excerpt,jdbcType=VARCHAR}, #{part,jdbcType=BIT}, #{collection,jdbcType=BIT}, #{permission,jdbcType=VARCHAR},
            #{nsfw,jdbcType=BIT}, #{like,jdbcType=BIT}, #{hide,jdbcType=BIT}, #{source,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR})
  </insert>
  <update id="update">
    update nodes
    set node_user         = #{node.user,jdbcType=BIGINT},
        node_type         = #{node.type,jdbcType=VARCHAR},
        node_mtime        = #{node.mtime,jdbcType=TIMESTAMP},
        node_part         = #{node.part,jdbcType=BIT},
        node_collection   = #{node.collection,jdbcType=BIT},
        node_permission   = #{node.permission,jdbcType=VARCHAR},
        node_nsfw         = #{node.nsfw,jdbcType=BIT},
        node_like         = #{node.like,jdbcType=BIT},
        node_hide         = #{node.hide,jdbcType=BIT},
        node_source       = #{node.source,jdbcType=VARCHAR}
      <if test="!isSimple">,
        node_title        = #{node.title,jdbcType=VARCHAR},
        node_excerpt      = #{node.excerpt,jdbcType=VARCHAR},
        node_description  = #{node.description,jdbcType=VARCHAR},
        node_comment      = #{node.comment,jdbcType=VARCHAR}
      </if>
    where id = #{node.id,jdbcType=BIGINT}
  </update>
  <select id="select" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select *
    from nodes
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select *
    from nodes
  </select>
  <delete id="deleteAll">
    delete from nodes where id in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">#{id}</foreach>
  </delete>

  <select id="selectAllHangingIds" resultType="java.lang.Long">
    select content.id from (select * from nodes) content
                             left join parts p on content.id = p.part_content_id
                             left join (select * from nodes) parent on parent.id = p.part_parent_id
    where
      content.node_part = true
      and
      (parent.node_collection = true or parent.node_collection is null)
    group by content.id
    having count(parent.id) = 0
  </select>
</mapper>
